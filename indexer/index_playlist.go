package indexer

import (
	"encoding/json"

	"maps"

	core_proto "github.com/AudiusProject/audiusd/pkg/api/core/v1"
	"github.com/jackc/pgx/v5"
)

func (ci *CoreIndexer) createPlaylist(txInfo TxInfo, em *core_proto.ManageEntityLegacy) error {
	var metadata GenericMetadata
	if err := json.Unmarshal([]byte(em.Metadata), &metadata); err != nil {
		return err
	}

	args := pgx.NamedArgs{
		"playlist_id":            em.EntityId,
		"playlist_owner_id":      em.UserId,
		"is_album":               em.EntityType == "Album",
		"is_private":             false,
		"playlist_contents":      "{}",
		"is_current":             true,
		"is_delete":              false,
		"created_at":             txInfo.timestamp,
		"updated_at":             txInfo.timestamp,
		"txhash":                 txInfo.txhash,
		"is_image_autogenerated": false,
		"is_scheduled_release":   false,
	}
	maps.Copy(args, metadata.Data)

	delete(args, "cover_art_cid")
	delete(args, "license")

	args["playlist_id"] = em.EntityId
	args["playlist_owner_id"] = em.UserId

	return ci.doInsert("playlists", args)
}

func (ci *CoreIndexer) updatePlaylist(txInfo TxInfo, em *core_proto.ManageEntityLegacy) error {
	var metadata GenericMetadata
	json.Unmarshal([]byte(em.Metadata), &metadata)

	args := pgx.NamedArgs{}
	maps.Copy(args, metadata.Data)

	delete(args, "cover_art_cid")

	return ci.doUpdate("playlists", args, pgx.NamedArgs{
		"playlist_id":       em.EntityId,
		"playlist_owner_id": em.UserId,
	})
}
