package database

import (
	"context"
	"log"
	"slices"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

type FixtureMap map[string][]map[string]any

var (
	baseRows = map[string]map[string]any{
		"users": {
			"blocknumber":          101,
			"user_id":              nil,
			"handle":               nil,
			"handle_lc":            nil,
			"wallet":               nil,
			"is_current":           true,
			"is_verified":          false,
			"created_at":           time.Now(),
			"updated_at":           time.Now(),
			"has_collectibles":     false,
			"txhash":               "tx1",
			"is_deactivated":       false,
			"is_available":         true,
			"is_storage_v2":        false,
			"allow_ai_attribution": false,
			"profile_type":         nil,
		},
		"tracks": {
			"blocknumber":                           101,
			"blockhash":                             "block_abc123",
			"track_id":                              "@track_id",
			"is_current":                            true,
			"is_delete":                             false,
			"owner_id":                              "@owner_id",
			"title":                                 "@title",
			"genre":                                 "Electronic",
			"mood":                                  "Energetic",
			"created_at":                            time.Now(),
			"updated_at":                            time.Now(),
			"txhash":                                "tx_123abc",
			"is_unlisted":                           false,
			"is_available":                          true,
			"track_segments":                        "[]", // JSONB string
			"is_scheduled_release":                  false,
			"is_downloadable":                       false,
			"is_original_available":                 false,
			"playlists_containing_track":            "{}", // JSONB string
			"playlists_previously_containing_track": map[string]any{},
			"audio_analysis_error_count":            0,
			"is_owned_by_user":                      false,
			"stream_conditions":                     nil,
			"download_conditions":                   nil,
		},
		"playlists": {
			"blocknumber":            101,
			"is_album":               false,
			"is_private":             false,
			"playlist_contents":      "{}",
			"is_current":             true,
			"is_delete":              false,
			"created_at":             time.Now(),
			"updated_at":             time.Now(),
			"txhash":                 "0xabcde12345",
			"is_image_autogenerated": false,
			"is_scheduled_release":   false,
			"stream_conditions":      "{}",
		},
		"playlist_tracks": {
			"playlist_id": nil,
			"track_id":    nil,
			"created_at":  time.Now(),
			"updated_at":  time.Now(),
			"is_removed":  false,
		},
		"follows": {
			"blockhash":        "block1",
			"blocknumber":      101,
			"follower_user_id": nil,
			"followee_user_id": nil,
			"is_current":       true,
			"is_delete":        false,
			"created_at":       time.Now(),
			"txhash":           "tx123",
			"slot":             500,
		},
		"saves": {
			"blockhash":         "block_abc123",
			"blocknumber":       101,
			"user_id":           nil,
			"save_item_id":      nil,
			"save_type":         nil,
			"is_current":        true,
			"is_delete":         false,
			"created_at":        time.Now(),
			"txhash":            "tx_456def",
			"slot":              500,
			"is_save_of_repost": false,
		},
		"plays": {
			"id":           nil,
			"play_item_id": nil,
			"source":       "test",
			"user_id":      nil,
			"created_at":   time.Now(),
			"updated_at":   time.Now(),
			"slot":         500,
			"signature":    nil,
			"city":         nil,
			"region":       nil,
			"country":      nil,
		},
		"reposts": {
			"blockhash":           "block_abc123",
			"blocknumber":         101,
			"user_id":             nil,
			"repost_item_id":      nil,
			"repost_type":         nil,
			"is_current":          true,
			"is_delete":           false,
			"created_at":          time.Now(),
			"txhash":              "tx_456def",
			"slot":                500,
			"is_repost_of_repost": false,
		},
		"developer_apps": {
			"blockhash":   "block1",
			"blocknumber": 101,
			"user_id":     nil,
			"address":     "0x7d7b6b7a97d1deefe3a1ccc5a13c48e8f055e0b6",
			"name":        "Test Developer App",
			"description": "Test Description",
			"created_at":  time.Now(),
			"txhash":      "tx123",
			"is_current":  true,
			"updated_at":  time.Now(),
			"image_url":   nil,
		},
		"track_trending_scores": {
			"track_id":   nil,
			"type":       "TRACKS",
			"genre":      nil,
			"version":    "pnagD",
			"time_range": nil,
			"score":      nil,
			"created_at": time.Now(),
		},
		"playlist_trending_scores": {
			"playlist_id": nil,
			"type":        "PLAYLISTS",
			"version":     "pnagD",
			"time_range":  nil,
			"score":       nil,
			"created_at":  time.Now(),
		},
		"associated_wallets": {
			"id":          nil,
			"user_id":     nil,
			"wallet":      nil,
			"blockhash":   "block_abc123",
			"blocknumber": 101,
			"is_current":  true,
			"is_delete":   false,
			"chain":       nil,
		},
		"aggregate_user_tips": {
			"sender_user_id":   nil,
			"receiver_user_id": nil,
			"amount":           1000,
		},
		"usdc_purchases": {
			"buyer_user_id":  nil,
			"seller_user_id": nil,
			"content_id":     nil,
			"content_type":   "track",
			"amount":         nil,
			"slot":           101,
			"signature":      nil,
			"splits":         "[]",
			"created_at":     time.Now(),
		},
		"grants": {
			"blockhash":       "block1",
			"blocknumber":     101,
			"user_id":         nil,
			"is_current":      true,
			"grantee_address": nil,
			"is_approved":     false,
			"is_revoked":      false,
			"created_at":      time.Now(),
			"updated_at":      time.Now(),
			"txhash":          "tx123",
		},
		"track_routes": {
			"slug":         nil,
			"title_slug":   nil,
			"collision_id": nil,
			"owner_id":     nil,
			"track_id":     nil,
			"is_current":   true,
			"blockhash":    "block_abc123",
			"blocknumber":  101,
			"txhash":       "tx123",
		},
		"playlist_routes": {
			"slug":         nil,
			"title_slug":   nil,
			"collision_id": nil,
			"owner_id":     nil,
			"playlist_id":  nil,
			"is_current":   true,
			"blockhash":    "block_abc123",
			"blocknumber":  101,
			"txhash":       "tx123",
		},
		"comments": {
			"entity_type": "Track",
			"created_at":  time.Now(),
			"updated_at":  time.Now(),
			"text":        "",
			"txhash":      "0x1",
			"blockhash":   "0x2",
		},
		"events": {
			"txhash":      "0x1",
			"blockhash":   "0x2",
			"blocknumber": 101,
			"event_id":    nil,
			"entity_type": nil,
			"user_id":     nil,
			"entity_id":   nil,
			"event_type":  nil,
			"end_date":    time.Now().Add(time.Hour * 24 * 30),
			"is_deleted":  false,
			"created_at":  time.Now(),
			"updated_at":  time.Now(),
			"event_data":  nil,
		},
		"user_challenges": {
			"challenge_id":          nil,
			"user_id":               nil,
			"specifier":             nil,
			"is_complete":           nil,
			"current_step_count":    nil,
			"completed_blocknumber": nil,
			"amount":                nil,
			"created_at":            time.Now(),
			"completed_at":          nil,
		},
		"challenge_listen_streak": {
			"user_id":          nil,
			"listen_streak":    nil,
			"last_listen_date": time.Now(),
		},
		"user_bank_accounts": {
			"bank_account":     nil,
			"ethereum_address": nil,
			"created_at":       time.Now(),
			"signature":        nil,
		},
		"audio_transactions_history": {
			"user_bank":              nil,
			"slot":                   101,
			"signature":              nil,
			"transaction_type":       nil,
			"method":                 nil,
			"created_at":             time.Now(),
			"updated_at":             time.Now(),
			"transaction_created_at": time.Now(),
			"tx_metadata":            nil,
			"change":                 0,
			"balance":                0,
		},
		"usdc_user_bank_accounts": {
			"bank_account":     nil,
			"ethereum_address": nil,
			"created_at":       time.Now(),
			"signature":        nil,
		},
		"usdc_transactions_history": {
			"user_bank":              nil,
			"slot":                   101,
			"signature":              nil,
			"transaction_type":       nil,
			"method":                 nil,
			"created_at":             time.Now(),
			"updated_at":             time.Now(),
			"transaction_created_at": time.Now(),
			"tx_metadata":            nil,
			"change":                 0,
			"balance":                0,
		},
		"aggregate_plays": {},
		"aggregate_track": {},
		"aggregate_user": {
			"user_id":          nil,
			"follower_count":   0,
			"following_count":  0,
			"dominant_genre":   nil,
			"track_save_count": 0,
		},
		"challenges":             {},
		"comment_threads":        {},
		"user_listening_history": {},
		"remixes":                {},
		"stems": {
			"child_track_id":  nil,
			"parent_track_id": nil,
		},
		"playlist_seen": {
			"user_id":     nil,
			"playlist_id": nil,
			"seen_at":     time.Now(),
			"is_current":  true,
			"blockhash":   "block_abc123",
			"blocknumber": 101,
			"txhash":      "tx_456def",
		},
		"aggregate_monthly_plays": {
			"play_item_id": nil,
			"timestamp":    time.Now(),
			"count":        0,
			"country":      "US",
		},
		"core_blocks": {
			"rowid":      1,
			"height":     1,
			"chain_id":   "audius-mainnet-alpha-beta",
			"hash":       nil,
			"proposer":   "0222989ff2856242a12c38d5d2c92a1481972d22290b42ba15c65ae61e37588b61",
			"created_at": time.Now(),
		},
		"core_validators": {
			"rowid":         1,
			"pub_key":       "0222989ff2856242a12c38d5d2c92a1481972d22290b42ba15c65ae61e37588b61",
			"endpoint":      nil,
			"eth_address":   nil,
			"comet_address": nil,
			"eth_block":     nil,
			"node_type":     "discovery-node",
			"sp_id":         1,
			"comet_pub_key": nil,
		},
		"comment_notification_settings": {
			"user_id":     nil,
			"entity_type": "Track",
			"entity_id":   nil,
			"is_muted":    false,
			"created_at":  time.Now(),
			"updated_at":  time.Now(),
		},
		"comment_reports": {
			"comment_id":  nil,
			"user_id":     nil,
			"is_delete":   false,
			"blockhash":   "block_abc123",
			"blocknumber": 101,
			"txhash":      "tx123",
			"created_at":  time.Now(),
			"updated_at":  time.Now(),
		},
		"muted_users": {
			"user_id":       nil,
			"muted_user_id": nil,
			"is_delete":     false,
			"blockhash":     "block_abc123",
			"blocknumber":   101,
			"txhash":        "tx123",
			"created_at":    time.Now(),
			"updated_at":    time.Now(),
		},
		"user_payout_wallet_history": {
			"user_id":                nil,
			"spl_usdc_payout_wallet": nil,
			"blocknumber":            101,
			"block_timestamp":        time.Now(),
		},
		"track_price_history": {
			"track_id":          nil,
			"splits":            nil,
			"total_price_cents": nil,
			"access":            "stream",
			"blocknumber":       101,
			"block_timestamp":   time.Now(),
		},
		"artist_coins": {
			"ticker":   nil,
			"mint":     nil,
			"user_id":  nil,
			"decimals": nil,
		},
		"sol_token_account_balances": {
			"account": nil,
			"owner":   "owner-acc",
			"mint":    nil,
			"balance": nil,
			"slot":    1,
		},
		"sol_claimable_accounts": {
			"signature":         nil,
			"instruction_index": 0,
			"slot":              1,
			"mint":              nil,
			"ethereum_address":  nil,
			"account":           nil,
		},
		"sol_token_account_balance_changes": {
			"account":         nil,
			"owner":           "owner-acc",
			"mint":            nil,
			"change":          nil,
			"balance":         nil,
			"block_timestamp": time.Now(),
			"slot":            1,
			"signature":       nil,
		},
	}
)

func SeedTable(pool *pgxpool.Pool, table string, data []map[string]any) {

	baseRow, ok := baseRows[table]
	if !ok {
		log.Fatal("no base row for table: ", table)
	}

	// union baseRow keys with data keys for field list
	fieldList := []string{}
	for f := range baseRow {
		fieldList = append(fieldList, f)
	}
	for _, row := range data {
		for f := range row {
			if !slices.Contains(fieldList, f) {
				fieldList = append(fieldList, f)
			}
		}
	}

	var records [][]any
	for _, row := range data {
		thisRow := map[string]any{}
		for field, value := range row {
			if value != nil {
				thisRow[field] = value
			}
		}

		vals := []any{}
		for _, field := range fieldList {
			val := baseRow[field]
			if v, ok := thisRow[field]; ok {
				val = v
			}
			vals = append(vals, val)
		}
		records = append(records, vals)
	}

	_, err := pool.CopyFrom(
		context.Background(),
		pgx.Identifier{table},
		fieldList,
		pgx.CopyFromRows(records),
	)
	if err != nil {
		panic(err)
	}
}

func Seed(pool *pgxpool.Pool, fixtures FixtureMap) {

	// the test block must exist...
	_, err := pool.Exec(context.Background(), `
	INSERT INTO public.blocks (
		blockhash,
		parenthash,
		is_current,
		number
	) VALUES (
		'block1',   -- blockhash
		'block0',   -- parenthash
		true,
		101
	) ON CONFLICT DO NOTHING;
	`)
	if err != nil {
		panic(err)
	}

	// because map key iteration order is randomized...
	// explicitly do the "entity" tables first
	// so that data dependencies exist before attempting to do saves, follows, etc.
	entityTables := []string{"users", "tracks", "playlists"}
	for _, tableName := range entityTables {
		if rows, ok := fixtures[tableName]; ok {
			SeedTable(pool, tableName, rows)
		}
	}

	for tableName, rows := range fixtures {
		if slices.Contains(entityTables, tableName) {
			continue
		}
		SeedTable(pool, tableName, rows)
	}
}
