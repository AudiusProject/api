package api

import (
	"context"
	"slices"
	"time"

	"github.com/jackc/pgx/v5"
)

var (
	userBaseRow = map[string]any{
		"user_id":              nil,
		"handle":               nil,
		"handle_lc":            nil,
		"wallet":               nil,
		"is_current":           true,
		"is_verified":          false,
		"created_at":           time.Now(),
		"updated_at":           time.Now(),
		"has_collectibles":     false,
		"txhash":               "tx1",
		"is_deactivated":       false,
		"is_available":         true,
		"is_storage_v2":        false,
		"allow_ai_attribution": false,
		"profile_type":         nil,
	}

	trackBaseRow = map[string]any{
		"blockhash":                             "block_abc123",
		"track_id":                              "@track_id",
		"is_current":                            true,
		"is_delete":                             false,
		"owner_id":                              "@owner_id",
		"title":                                 "@title",
		"genre":                                 "Electronic",
		"mood":                                  "Energetic",
		"created_at":                            time.Now(),
		"updated_at":                            time.Now(),
		"txhash":                                "tx_123abc",
		"is_unlisted":                           false,
		"is_available":                          true,
		"track_segments":                        "[]", // JSONB string
		"is_scheduled_release":                  false,
		"is_downloadable":                       false,
		"is_original_available":                 false,
		"playlists_containing_track":            "{}", // JSONB string
		"playlists_previously_containing_track": map[string]any{},
		"audio_analysis_error_count":            0,
		"is_owned_by_user":                      false,
		"stream_conditions":                     nil,
		"download_conditions":                   nil,
	}

	playlistBaseRow = map[string]any{
		// "playlist_id":       1,
		// "playlist_owner_id": 42,
		"is_album":               false,
		"is_private":             false,
		"playlist_contents":      "{}",
		"is_current":             true,
		"is_delete":              false,
		"created_at":             time.Now(),
		"updated_at":             time.Now(),
		"txhash":                 "0xabcde12345",
		"is_image_autogenerated": false,
		"is_scheduled_release":   false,
		"stream_conditions":      "{}",
	}

	followBaseRow = map[string]any{
		"blockhash":        "block1",
		"blocknumber":      101,
		"follower_user_id": nil,
		"followee_user_id": nil,
		"is_current":       true,
		"is_delete":        false,
		"created_at":       time.Now(),
		"txhash":           "tx123",
		"slot":             500,
	}

	saveBaseRow = map[string]any{
		"blockhash":         "block_abc123",
		"blocknumber":       101,
		"user_id":           nil,
		"save_item_id":      nil,
		"save_type":         nil,
		"is_current":        true,
		"is_delete":         false,
		"created_at":        time.Now(),
		"txhash":            "tx_456def",
		"slot":              500,
		"is_save_of_repost": false,
	}

	repostBaseRow = map[string]any{
		"blockhash":           "block_abc123",
		"blocknumber":         101,
		"user_id":             nil,
		"repost_item_id":      nil,
		"repost_type":         nil,
		"is_current":          true,
		"is_delete":           false,
		"created_at":          time.Now(),
		"txhash":              "tx_456def",
		"slot":                500,
		"is_repost_of_repost": false,
	}

	developerAppBaseRow = map[string]any{
		"blockhash":   "block1",
		"blocknumber": 101,
		"user_id":     nil,
		"address":     "0x7d7b6b7a97d1deefe3a1ccc5a13c48e8f055e0b6",
		"name":        "Test Developer App",
		"description": "Test Description",
		"created_at":  time.Now(),
		"txhash":      "tx123",
		"is_current":  true,
		"updated_at":  time.Now(),
		"image_url":   nil,
	}

	trackTrendingScoreBaseRow = map[string]any{
		"track_id":   nil,
		"type":       "TRACKS",
		"genre":      nil,
		"version":    "pnagD",
		"time_range": nil,
		"score":      nil,
		"created_at": time.Now(),
	}

	playlistTrendingScoreBaseRow = map[string]any{
		"playlist_id": nil,
		"type":        "PLAYLISTS",
		"version":     "pnagD",
		"time_range":  nil,
		"score":       nil,
		"created_at":  time.Now(),
	}

	connectedWalletsBaseRow = map[string]any{
		"id":          nil,
		"user_id":     nil,
		"wallet":      nil,
		"blockhash":   "block_abc123",
		"blocknumber": 101,
		"is_current":  true,
		"is_delete":   false,
		"chain":       nil,
	}

	aggregateUserTipsBaseRow = map[string]any{
		"sender_user_id":   nil,
		"receiver_user_id": nil,
		"amount":           1000,
	}

	usdcPurchaseBaseRow = map[string]any{
		"buyer_user_id":  nil,
		"seller_user_id": nil,
		"content_id":     nil,
		"content_type":   "track",
		"amount":         nil,
		"slot":           101,
		"signature":      nil,
		"splits":         "[]",
		"created_at":     time.Now(),
	}

	grantBaseRow = map[string]any{
		"blockhash":       "block1",
		"blocknumber":     101,
		"user_id":         nil,
		"is_current":      true,
		"grantee_address": nil,
		"is_approved":     false,
		"is_revoked":      false,
		"created_at":      time.Now(),
		"updated_at":      time.Now(),
		"txhash":          "tx123",
	}

	trackRouteBaseRow = map[string]any{
		"slug":         nil,
		"title_slug":   nil,
		"collision_id": nil,
		"owner_id":     nil,
		"track_id":     nil,
		"is_current":   true,
		"blockhash":    "block_abc123",
		"blocknumber":  101,
		"txhash":       "tx123",
	}

	playlistRouteBaseRow = map[string]any{
		"slug":         nil,
		"title_slug":   nil,
		"collision_id": nil,
		"owner_id":     nil,
		"playlist_id":  nil,
		"is_current":   true,
		"blockhash":    "block_abc123",
		"blocknumber":  101,
		"txhash":       "tx123",
	}

	commentBaseRow = map[string]any{
		"entity_type": "Track",
		"created_at":  time.Now(),
		"updated_at":  time.Now(),
		"txhash":      "0x1",
		"blockhash":   "0x2",
	}

	eventBaseRow = map[string]any{
		"txhash":      "0x1",
		"blockhash":   "0x2",
		"blocknumber": 101,
		"event_id":    nil,
		"entity_type": nil,
		"user_id":     nil,
		"entity_id":   nil,
		"event_type":  nil,
		"end_date":    time.Now().Add(time.Hour * 24 * 30),
		"is_deleted":  false,
		"created_at":  time.Now(),
		"updated_at":  time.Now(),
		"event_data":  nil,
	}

	userChallengeBaseRow = map[string]any{
		"challenge_id":          nil,
		"user_id":               nil,
		"specifier":             nil,
		"is_complete":           nil,
		"current_step_count":    nil,
		"completed_blocknumber": nil,
		"amount":                nil,
		"created_at":            time.Now(),
		"completed_at":          nil,
	}

	listenStreakBaseRow = map[string]any{
		"user_id":          nil,
		"listen_streak":    nil,
		"last_listen_date": time.Now(),
	}

	userBankBaseRow = map[string]any{
		"bank_account":     nil,
		"ethereum_address": nil,
		"created_at":       time.Now(),
		"signature":        nil,
	}

	audioTransactionBaseRow = map[string]any{
		"user_bank":              nil,
		"slot":                   101,
		"signature":              nil,
		"transaction_type":       nil,
		"method":                 nil,
		"created_at":             time.Now(),
		"updated_at":             time.Now(),
		"transaction_created_at": time.Now(),
		"tx_metadata":            nil,
		"change":                 0,
		"balance":                0,
	}

	usdcUserBankBaseRow = map[string]any{
		"bank_account":     nil,
		"ethereum_address": nil,
		"created_at":       time.Now(),
		"signature":        nil,
	}

	usdcTransactionBaseRow = map[string]any{
		"user_bank":              nil,
		"slot":                   101,
		"signature":              nil,
		"transaction_type":       nil,
		"method":                 nil,
		"created_at":             time.Now(),
		"updated_at":             time.Now(),
		"transaction_created_at": time.Now(),
		"tx_metadata":            nil,
		"change":                 0,
		"balance":                0,
	}

	playlistSeenBaseRow = map[string]any{
		"user_id":     nil,
		"playlist_id": nil,
		"seen_at":     time.Now(),
		"is_current":  true,
		"blockhash":   "block_abc123",
		"blocknumber": 101,
		"txhash":      "tx_456def",
	}
)

func insertFixturesFromArray(table string, baseRow map[string]any, data []map[string]any) {
	// union baseRow keys with data keys for field list
	fieldList := []string{}
	for f := range baseRow {
		fieldList = append(fieldList, f)
	}
	for _, row := range data {
		for f := range row {
			if !slices.Contains(fieldList, f) {
				fieldList = append(fieldList, f)
			}
		}
	}

	var records [][]any
	for _, row := range data {
		thisRow := map[string]any{}
		for field, value := range row {
			if value != nil {
				thisRow[field] = value
			}
		}

		vals := []any{}
		for _, field := range fieldList {
			val := baseRow[field]
			if v, ok := thisRow[field]; ok {
				val = v
			}
			vals = append(vals, val)
		}
		records = append(records, vals)
	}

	_, err := app.pool.CopyFrom(
		context.Background(),
		pgx.Identifier{table},
		fieldList,
		pgx.CopyFromRows(records),
	)
	checkErr(err)
}

type FixtureSet struct {
	users         []map[string]any
	tracks        []map[string]any
	playlists     []map[string]any
	saves         []map[string]any
	playlist_seen []map[string]any
}

func createFixtures(fixtures FixtureSet) {
	insertFixturesFromArray("users", userBaseRow, fixtures.users)
	insertFixturesFromArray("tracks", trackBaseRow, fixtures.tracks)
	insertFixturesFromArray("playlists", playlistBaseRow, fixtures.playlists)
	insertFixturesFromArray("saves", saveBaseRow, fixtures.saves)
	insertFixturesFromArray("playlist_seen", playlistSeenBaseRow, fixtures.playlist_seen)
}
