// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_connected_wallets.sql

package dbv1

import (
	"context"
)

const getUserConnectedWallets = `-- name: GetUserConnectedWallets :many
SELECT chain, wallet
FROM associated_wallets 
WHERE is_current = true
	AND is_delete = false 
	AND user_id = $1
`

type GetUserConnectedWalletsRow struct {
	Chain  WalletChain `json:"chain"`
	Wallet string      `json:"wallet"`
}

func (q *Queries) GetUserConnectedWallets(ctx context.Context, userID int32) ([]GetUserConnectedWalletsRow, error) {
	rows, err := q.db.Query(ctx, getUserConnectedWallets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserConnectedWalletsRow
	for rows.Next() {
		var i GetUserConnectedWalletsRow
		if err := rows.Scan(&i.Chain, &i.Wallet); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
