// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_user_audio_transactions.sql

package dbv1

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserAudioTransactionsSortedByDate = `-- name: GetUserAudioTransactionsSortedByDate :many
WITH base AS (
SELECT ath.created_at, transaction_type, ath.signature, method, ath.user_bank, tx_metadata, change::text, balance::text
FROM users
JOIN user_bank_accounts uba ON uba.ethereum_address = users.wallet
JOIN audio_transactions_history ath ON ath.user_bank = uba.bank_account
WHERE users.user_id = $4::int AND users.is_current = TRUE
)
SELECT created_at, transaction_type, signature, method, user_bank, tx_metadata, change, balance FROM base
ORDER BY
  CASE WHEN $1 = 'asc' THEN created_at END ASC,
  CASE WHEN $1 = 'desc' THEN created_at END DESC
LIMIT $3
OFFSET $2
`

type GetUserAudioTransactionsSortedByDateParams struct {
	SortDirection interface{} `json:"sort_direction"`
	OffsetVal     int32       `json:"offset_val"`
	LimitVal      int32       `json:"limit_val"`
	UserID        int32       `json:"user_id"`
}

type GetUserAudioTransactionsSortedByDateRow struct {
	CreatedAt       time.Time   `json:"created_at"`
	TransactionType string      `json:"transaction_type"`
	Signature       string      `json:"signature"`
	Method          string      `json:"method"`
	UserBank        string      `json:"user_bank"`
	TxMetadata      pgtype.Text `json:"tx_metadata"`
	Change          string      `json:"change"`
	Balance         string      `json:"balance"`
}

func (q *Queries) GetUserAudioTransactionsSortedByDate(ctx context.Context, arg GetUserAudioTransactionsSortedByDateParams) ([]GetUserAudioTransactionsSortedByDateRow, error) {
	rows, err := q.db.Query(ctx, getUserAudioTransactionsSortedByDate,
		arg.SortDirection,
		arg.OffsetVal,
		arg.LimitVal,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAudioTransactionsSortedByDateRow
	for rows.Next() {
		var i GetUserAudioTransactionsSortedByDateRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.TransactionType,
			&i.Signature,
			&i.Method,
			&i.UserBank,
			&i.TxMetadata,
			&i.Change,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAudioTransactionsSortedByType = `-- name: GetUserAudioTransactionsSortedByType :many
WITH base AS (
SELECT ath.created_at, transaction_type, ath.signature, method, ath.user_bank, tx_metadata, change::text, balance::text
FROM users
JOIN user_bank_accounts uba ON uba.ethereum_address = users.wallet
JOIN audio_transactions_history ath ON ath.user_bank = uba.bank_account
WHERE users.user_id = $4::int AND users.is_current = TRUE
)
SELECT created_at, transaction_type, signature, method, user_bank, tx_metadata, change, balance FROM base
ORDER BY
  CASE WHEN $1 = 'asc' THEN transaction_type END ASC,
  CASE WHEN $1 = 'desc' THEN transaction_type END DESC
LIMIT $3
OFFSET $2
`

type GetUserAudioTransactionsSortedByTypeParams struct {
	SortDirection interface{} `json:"sort_direction"`
	OffsetVal     int32       `json:"offset_val"`
	LimitVal      int32       `json:"limit_val"`
	UserID        int32       `json:"user_id"`
}

type GetUserAudioTransactionsSortedByTypeRow struct {
	CreatedAt       time.Time   `json:"created_at"`
	TransactionType string      `json:"transaction_type"`
	Signature       string      `json:"signature"`
	Method          string      `json:"method"`
	UserBank        string      `json:"user_bank"`
	TxMetadata      pgtype.Text `json:"tx_metadata"`
	Change          string      `json:"change"`
	Balance         string      `json:"balance"`
}

func (q *Queries) GetUserAudioTransactionsSortedByType(ctx context.Context, arg GetUserAudioTransactionsSortedByTypeParams) ([]GetUserAudioTransactionsSortedByTypeRow, error) {
	rows, err := q.db.Query(ctx, getUserAudioTransactionsSortedByType,
		arg.SortDirection,
		arg.OffsetVal,
		arg.LimitVal,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAudioTransactionsSortedByTypeRow
	for rows.Next() {
		var i GetUserAudioTransactionsSortedByTypeRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.TransactionType,
			&i.Signature,
			&i.Method,
			&i.UserBank,
			&i.TxMetadata,
			&i.Change,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
