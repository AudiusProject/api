// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_users.sql

package dbv1

import (
	"context"
	"time"

	"bridgerton.audius.co/trashid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getUsers = `-- name: GetUsers :many
SELECT
  album_count,
  artist_pick_track_id,
  bio,

  -- todo: this can sometimes be a Qm cid
  -- sometimes be a json string...
  cover_photo,

  follower_count,
  following_count as followee_count,
  handle,
  u.user_id as id,
  u.user_id::int as user_id,
  is_verified,
  twitter_handle,
  instagram_handle,
  tiktok_handle,
  verified_with_twitter,
  verified_with_instagram,
  verified_with_tiktok,
  website,
  donation,
  location,
  name,
  playlist_count,
  profile_type,

  -- todo: this can sometimes be a Qm cid
  -- sometimes be a json string...
  profile_picture,

  repost_count,
  -- Use total_track_count when viewing own profile, otherwise use track_count
  (CASE
    WHEN u.user_id = $1::int THEN total_track_count
    ELSE track_count
  END)::bigint as track_count,
  is_deactivated,
  is_available,
  wallet as erc_wallet,
  user_bank_accounts.bank_account as spl_wallet,
  usdc_user_bank_accounts.bank_account as usdc_wallet,
  spl_usdc_payout_wallet,
  supporter_count,
  supporting_count,
  wallet,
  balance,
  associated_wallets_balance,

  -- total_balance
  (
    coalesce(balance, '0')::NUMERIC +
    coalesce(associated_wallets_balance, '0')::NUMERIC +
    -- to wei
    (coalesce(associated_sol_wallets_balance, '0')::NUMERIC * 10^10) +
    (coalesce(waudio, '0')::NUMERIC * 10^10)
  )::NUMERIC::TEXT AS total_balance,

  -- total_audio_balance,
  FLOOR(
    (
      coalesce(balance, '0')::NUMERIC +
      coalesce(associated_wallets_balance, '0')::NUMERIC +
      -- to wei
      (coalesce(associated_sol_wallets_balance, '0')::NUMERIC * 10^10) +
      (coalesce(waudio, '0')::NUMERIC * 10^10)
    ) / 1e18
  )::INT AS total_audio_balance,

  -- payout wallet
  coalesce(
    spl_usdc_payout_wallet,
    usdc_user_bank_accounts.bank_account,
    ''
  )::text as payout_wallet,

  coalesce(waudio, '0') as waudio_balance,
  coalesce(associated_sol_wallets_balance, '0') as associated_sol_wallets_balance,
  blocknumber,
  u.created_at,
  is_storage_v2,
  creator_node_endpoint,

  (
    SELECT count(*)
    FROM follows f
    JOIN (
      SELECT followee_user_id
      FROM follows mf
      WHERE mf.follower_user_id = $1
        AND mf.is_delete = false
    ) mf ON f.follower_user_id = mf.followee_user_id
    WHERE $1 > 0
    AND $1 != u.user_id -- don't compute when viewing own profile
    AND f.followee_user_id = u.user_id
    AND f.is_delete = false
  ) AS current_user_followee_follow_count,

  (
    SELECT count(*) > 0
    FROM follows
    WHERE $1 > 0
      AND follower_user_id = $1
      AND followee_user_id = u.user_id
      AND is_delete = false
  ) AS does_current_user_follow,

  (
    SELECT count(*) > 0
    FROM subscriptions
    WHERE $1 > 0
      AND subscriber_id = $1
      AND user_id = u.user_id
      AND is_delete = false
  ) AS does_current_user_subscribe,

  (
    SELECT count(*) > 0
    FROM follows
    WHERE $1 > 0
      AND followee_user_id = $1
      AND follower_user_id = u.user_id
      AND is_delete = false
  ) AS does_follow_current_user,

  handle_lc,
  u.updated_at,
  cover_photo_sizes,
  null as cover_photo_cids, -- todo: what goes in here?
  null as cover_photo_legacy, -- todo:

  profile_picture_sizes,
  null as profile_picture_cids, -- todo
  null as profile_picture_legacy, -- todo

  has_collectibles,
  allow_ai_attribution,

  (
    SELECT logo_uri FROM artist_coins
    WHERE artist_coins.mint = COALESCE(
      -- Owned first
      (
        SELECT artist_coins.mint
        FROM artist_coins
        WHERE artist_coins.user_id = u.user_id
        LIMIT 1
      ),
      -- Then most held
      (
        SELECT sol_user_balances.mint
        FROM sol_user_balances
        WHERE sol_user_balances.user_id = u.user_id
          AND sol_user_balances.mint != '9LzCMqDgTKYz9Drzqnpgee3SGa89up3a247ypMj2xrqM' -- ignore wAUDIO
        ORDER BY sol_user_balances.balance DESC
        LIMIT 1
      )
    )
  ) AS artist_coin_badge

FROM users u
JOIN aggregate_user using (user_id)
LEFT JOIN user_balances using (user_id)
LEFT JOIN user_bank_accounts on u.wallet = user_bank_accounts.ethereum_address
LEFT JOIN usdc_user_bank_accounts on u.wallet = usdc_user_bank_accounts.ethereum_address
WHERE u.user_id = ANY($2::int[])
ORDER BY u.user_id
`

type GetUsersParams struct {
	MyID int32   `json:"my_id"`
	Ids  []int32 `json:"ids"`
}

type GetUsersRow struct {
	AlbumCount                     pgtype.Int8    `json:"album_count"`
	ArtistPickTrackID              pgtype.Int4    `json:"artist_pick_track_id"`
	Bio                            pgtype.Text    `json:"bio"`
	CoverPhoto                     pgtype.Text    `json:"cover_photo"`
	FollowerCount                  pgtype.Int8    `json:"follower_count"`
	FolloweeCount                  pgtype.Int8    `json:"followee_count"`
	Handle                         pgtype.Text    `json:"handle"`
	ID                             trashid.HashId `json:"id"`
	UserID                         int32          `json:"user_id"`
	IsVerified                     bool           `json:"is_verified"`
	TwitterHandle                  pgtype.Text    `json:"twitter_handle"`
	InstagramHandle                pgtype.Text    `json:"instagram_handle"`
	TiktokHandle                   pgtype.Text    `json:"tiktok_handle"`
	VerifiedWithTwitter            pgtype.Bool    `json:"verified_with_twitter"`
	VerifiedWithInstagram          pgtype.Bool    `json:"verified_with_instagram"`
	VerifiedWithTiktok             pgtype.Bool    `json:"verified_with_tiktok"`
	Website                        pgtype.Text    `json:"website"`
	Donation                       pgtype.Text    `json:"donation"`
	Location                       pgtype.Text    `json:"location"`
	Name                           pgtype.Text    `json:"name"`
	PlaylistCount                  pgtype.Int8    `json:"playlist_count"`
	ProfileType                    *string        `json:"profile_type"`
	ProfilePicture                 pgtype.Text    `json:"profile_picture"`
	RepostCount                    pgtype.Int8    `json:"repost_count"`
	TrackCount                     int64          `json:"track_count"`
	IsDeactivated                  bool           `json:"is_deactivated"`
	IsAvailable                    bool           `json:"is_available"`
	ErcWallet                      pgtype.Text    `json:"erc_wallet"`
	SplWallet                      pgtype.Text    `json:"spl_wallet"`
	UsdcWallet                     pgtype.Text    `json:"usdc_wallet"`
	SplUsdcPayoutWallet            pgtype.Text    `json:"spl_usdc_payout_wallet"`
	SupporterCount                 int32          `json:"supporter_count"`
	SupportingCount                int32          `json:"supporting_count"`
	Wallet                         pgtype.Text    `json:"wallet"`
	Balance                        pgtype.Text    `json:"balance"`
	AssociatedWalletsBalance       pgtype.Text    `json:"associated_wallets_balance"`
	TotalBalance                   string         `json:"total_balance"`
	TotalAudioBalance              int32          `json:"total_audio_balance"`
	PayoutWallet                   string         `json:"payout_wallet"`
	WaudioBalance                  string         `json:"waudio_balance"`
	AssociatedSolWalletsBalance    string         `json:"associated_sol_wallets_balance"`
	Blocknumber                    pgtype.Int4    `json:"blocknumber"`
	CreatedAt                      time.Time      `json:"created_at"`
	IsStorageV2                    bool           `json:"is_storage_v2"`
	CreatorNodeEndpoint            pgtype.Text    `json:"creator_node_endpoint"`
	CurrentUserFolloweeFollowCount int64          `json:"current_user_followee_follow_count"`
	DoesCurrentUserFollow          bool           `json:"does_current_user_follow"`
	DoesCurrentUserSubscribe       bool           `json:"does_current_user_subscribe"`
	DoesFollowCurrentUser          bool           `json:"does_follow_current_user"`
	HandleLc                       pgtype.Text    `json:"handle_lc"`
	UpdatedAt                      time.Time      `json:"updated_at"`
	CoverPhotoSizes                pgtype.Text    `json:"cover_photo_sizes"`
	CoverPhotoCids                 interface{}    `json:"cover_photo_cids"`
	CoverPhotoLegacy               interface{}    `json:"cover_photo_legacy"`
	ProfilePictureSizes            pgtype.Text    `json:"profile_picture_sizes"`
	ProfilePictureCids             interface{}    `json:"profile_picture_cids"`
	ProfilePictureLegacy           interface{}    `json:"profile_picture_legacy"`
	HasCollectibles                bool           `json:"has_collectibles"`
	AllowAiAttribution             bool           `json:"allow_ai_attribution"`
	ArtistCoinBadge                pgtype.Text    `json:"artist_coin_badge"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.MyID, arg.Ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.AlbumCount,
			&i.ArtistPickTrackID,
			&i.Bio,
			&i.CoverPhoto,
			&i.FollowerCount,
			&i.FolloweeCount,
			&i.Handle,
			&i.ID,
			&i.UserID,
			&i.IsVerified,
			&i.TwitterHandle,
			&i.InstagramHandle,
			&i.TiktokHandle,
			&i.VerifiedWithTwitter,
			&i.VerifiedWithInstagram,
			&i.VerifiedWithTiktok,
			&i.Website,
			&i.Donation,
			&i.Location,
			&i.Name,
			&i.PlaylistCount,
			&i.ProfileType,
			&i.ProfilePicture,
			&i.RepostCount,
			&i.TrackCount,
			&i.IsDeactivated,
			&i.IsAvailable,
			&i.ErcWallet,
			&i.SplWallet,
			&i.UsdcWallet,
			&i.SplUsdcPayoutWallet,
			&i.SupporterCount,
			&i.SupportingCount,
			&i.Wallet,
			&i.Balance,
			&i.AssociatedWalletsBalance,
			&i.TotalBalance,
			&i.TotalAudioBalance,
			&i.PayoutWallet,
			&i.WaudioBalance,
			&i.AssociatedSolWalletsBalance,
			&i.Blocknumber,
			&i.CreatedAt,
			&i.IsStorageV2,
			&i.CreatorNodeEndpoint,
			&i.CurrentUserFolloweeFollowCount,
			&i.DoesCurrentUserFollow,
			&i.DoesCurrentUserSubscribe,
			&i.DoesFollowCurrentUser,
			&i.HandleLc,
			&i.UpdatedAt,
			&i.CoverPhotoSizes,
			&i.CoverPhotoCids,
			&i.CoverPhotoLegacy,
			&i.ProfilePictureSizes,
			&i.ProfilePictureCids,
			&i.ProfilePictureLegacy,
			&i.HasCollectibles,
			&i.AllowAiAttribution,
			&i.ArtistCoinBadge,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
