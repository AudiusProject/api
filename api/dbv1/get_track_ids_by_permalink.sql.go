// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_track_ids_by_permalink.sql

package dbv1

import (
	"context"
)

const getTrackIdsByPermalink = `-- name: GetTrackIdsByPermalink :many
WITH lower_handles AS (
  SELECT LOWER(h) AS handle
  FROM unnest($2::text[]) AS h
),
lower_permalinks AS (
  SELECT LOWER(p) AS permalink
  FROM unnest($3::text[]) AS p
)
SELECT tr.track_id
FROM track_routes tr
JOIN users u ON u.user_id = tr.owner_id
JOIN lower_handles lh
  ON u.handle_lc = lh.handle
WHERE tr.slug = ANY($1::text[])
  -- in case of conflicts across usAers
  AND CONCAT('/', u.handle_lc, '/', LOWER(tr.slug)) = ANY(
    SELECT permalink FROM lower_permalinks
  )
`

type GetTrackIdsByPermalinkParams struct {
	Slugs      []string `json:"slugs"`
	Handles    []string `json:"handles"`
	Permalinks []string `json:"permalinks"`
}

func (q *Queries) GetTrackIdsByPermalink(ctx context.Context, arg GetTrackIdsByPermalinkParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, getTrackIdsByPermalink, arg.Slugs, arg.Handles, arg.Permalinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var track_id int32
		if err := rows.Scan(&track_id); err != nil {
			return nil, err
		}
		items = append(items, track_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
