// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_user_usdc_transactions.sql

package dbv1

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserUsdcTransactions = `-- name: GetUserUsdcTransactions :many
SELECT uth.created_at as transaction_date, transaction_type, uth.signature, method, uth.user_bank, tx_metadata as metadata, change::text, balance::text
FROM users
JOIN usdc_user_bank_accounts uba ON uba.ethereum_address = users.wallet
JOIN usdc_transactions_history uth ON uth.user_bank = uba.bank_account
WHERE users.user_id = $1::int
  AND users.is_current = TRUE
  AND ($2::text[] IS NULL OR transaction_type = ANY($2::text[]))
ORDER BY
    CASE WHEN $3::text = 'date' AND $4::text = 'asc' THEN uth.created_at END ASC,
    CASE WHEN $3::text = 'date' AND $4::text = 'desc' THEN uth.created_at END DESC,
    CASE WHEN $3::text = 'type' AND $4::text = 'asc' THEN transaction_type END ASC,
    CASE WHEN $3::text = 'type' AND $4::text = 'desc' THEN transaction_type END DESC
LIMIT $6
OFFSET $5
`

type GetUserUsdcTransactionsParams struct {
	UserID           int32    `json:"user_id"`
	TransactionTypes []string `json:"transaction_types"`
	SortMethod       string   `json:"sort_method"`
	SortDirection    string   `json:"sort_direction"`
	OffsetVal        int32    `json:"offset_val"`
	LimitVal         int32    `json:"limit_val"`
}

type GetUserUsdcTransactionsRow struct {
	TransactionDate time.Time   `json:"transaction_date"`
	TransactionType string      `json:"transaction_type"`
	Signature       string      `json:"signature"`
	Method          string      `json:"method"`
	UserBank        string      `json:"user_bank"`
	Metadata        pgtype.Text `json:"metadata"`
	Change          string      `json:"change"`
	Balance         string      `json:"balance"`
}

func (q *Queries) GetUserUsdcTransactions(ctx context.Context, arg GetUserUsdcTransactionsParams) ([]GetUserUsdcTransactionsRow, error) {
	rows, err := q.db.Query(ctx, getUserUsdcTransactions,
		arg.UserID,
		arg.TransactionTypes,
		arg.SortMethod,
		arg.SortDirection,
		arg.OffsetVal,
		arg.LimitVal,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserUsdcTransactionsRow
	for rows.Next() {
		var i GetUserUsdcTransactionsRow
		if err := rows.Scan(
			&i.TransactionDate,
			&i.TransactionType,
			&i.Signature,
			&i.Method,
			&i.UserBank,
			&i.Metadata,
			&i.Change,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserUsdcTransactionsCount = `-- name: GetUserUsdcTransactionsCount :one
SELECT count(*)
FROM users
JOIN usdc_user_bank_accounts uba ON uba.ethereum_address = users.wallet
JOIN usdc_transactions_history uth ON uth.user_bank = uba.bank_account
WHERE users.user_id = $1::int
  AND users.is_current = TRUE
  AND ($2::text[] IS NULL OR transaction_type = ANY($2::text[]))
`

type GetUserUsdcTransactionsCountParams struct {
	UserID           int32    `json:"user_id"`
	TransactionTypes []string `json:"transaction_types"`
}

func (q *Queries) GetUserUsdcTransactionsCount(ctx context.Context, arg GetUserUsdcTransactionsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getUserUsdcTransactionsCount, arg.UserID, arg.TransactionTypes)
	var count int64
	err := row.Scan(&count)
	return count, err
}
