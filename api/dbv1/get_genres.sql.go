// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_genres.sql

package dbv1

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGenres = `-- name: GetGenres :many
SELECT
    genre,
    COUNT(track_id) AS count
FROM
    tracks
WHERE
    genre IS NOT NULL
    AND genre != ''
    AND is_current = TRUE
    AND created_at > $1
GROUP BY
    genre
ORDER BY
    count DESC
LIMIT $3
OFFSET $2
`

type GetGenresParams struct {
	StartTime time.Time `json:"start_time"`
	OffsetVal int32     `json:"offset_val"`
	LimitVal  int32     `json:"limit_val"`
}

type GetGenresRow struct {
	Genre pgtype.Text `json:"genre"`
	Count int64       `json:"count"`
}

func (q *Queries) GetGenres(ctx context.Context, arg GetGenresParams) ([]GetGenresRow, error) {
	rows, err := q.db.Query(ctx, getGenres, arg.StartTime, arg.OffsetVal, arg.LimitVal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGenresRow
	for rows.Next() {
		var i GetGenresRow
		if err := rows.Scan(&i.Genre, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
