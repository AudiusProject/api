// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_account_playlists.sql

package dbv1

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAccountPlaylists = `-- name: GetAccountPlaylists :many
WITH saved_playlists AS (
    SELECT save_item_id
    FROM saves
    WHERE user_id = $1
      AND is_current = TRUE
      AND is_delete = FALSE
      AND (save_type = 'playlist' OR save_type = 'album')
)
SELECT
    p.playlist_id,
    p.is_album,
    -- p.permalink // TODO
    p.playlist_name,
    u.user_id,
    u.handle,
    u.is_deactivated,
    p.created_at
FROM playlists p
JOIN users u ON p.playlist_owner_id = u.user_id
WHERE (
    -- Owned playlists
    (p.is_current = TRUE
        AND p.is_delete = FALSE
        AND p.playlist_owner_id = $1)

    OR

    -- Saved playlists
    (p.is_current = TRUE
        AND p.is_delete = FALSE
        AND p.playlist_id IN (SELECT save_item_id FROM saved_playlists))
)
ORDER BY p.created_at DESC
`

type GetAccountPlaylistsRow struct {
	PlaylistID    int32       `json:"playlist_id"`
	IsAlbum       bool        `json:"is_album"`
	PlaylistName  pgtype.Text `json:"playlist_name"`
	UserID        int32       `json:"user_id"`
	Handle        pgtype.Text `json:"handle"`
	IsDeactivated bool        `json:"is_deactivated"`
	CreatedAt     time.Time   `json:"created_at"`
}

func (q *Queries) GetAccountPlaylists(ctx context.Context, userID int32) ([]GetAccountPlaylistsRow, error) {
	rows, err := q.db.Query(ctx, getAccountPlaylists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountPlaylistsRow
	for rows.Next() {
		var i GetAccountPlaylistsRow
		if err := rows.Scan(
			&i.PlaylistID,
			&i.IsAlbum,
			&i.PlaylistName,
			&i.UserID,
			&i.Handle,
			&i.IsDeactivated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
