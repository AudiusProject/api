// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_account_playlists.sql

package dbv1

import (
	"context"
	"time"

	"bridgerton.audius.co/trashid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAccountPlaylists = `-- name: GetAccountPlaylists :many
WITH playlist_ids AS (
    SELECT save_item_id as id
    FROM saves
    WHERE saves.user_id = $1
      AND is_delete = FALSE
      AND (save_type = 'playlist' OR save_type = 'album')
    UNION
    SELECT p.playlist_id AS id
    FROM playlists p
    WHERE p.is_delete = FALSE
      AND p.playlist_owner_id = $1
)
SELECT
    p.playlist_id,
    p.is_album,
    r.slug,
    p.playlist_name,
    u.user_id,
    u.handle,
    u.is_deactivated,
    p.created_at
FROM playlists p
JOIN users u ON p.playlist_owner_id = u.user_id
JOIN playlist_routes r ON p.playlist_id = r.playlist_id AND r.is_current = TRUE
WHERE p.is_delete = false
  AND p.playlist_id IN (SELECT id FROM playlist_ids)
ORDER BY p.created_at DESC, p.playlist_id ASC
`

type GetAccountPlaylistsRow struct {
	PlaylistID    int32          `json:"playlist_id"`
	IsAlbum       bool           `json:"is_album"`
	Slug          string         `json:"slug"`
	PlaylistName  pgtype.Text    `json:"playlist_name"`
	UserID        trashid.HashId `json:"user_id"`
	Handle        pgtype.Text    `json:"handle"`
	IsDeactivated bool           `json:"is_deactivated"`
	CreatedAt     time.Time      `json:"created_at"`
}

func (q *Queries) GetAccountPlaylists(ctx context.Context, userID int32) ([]GetAccountPlaylistsRow, error) {
	rows, err := q.db.Query(ctx, getAccountPlaylists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountPlaylistsRow
	for rows.Next() {
		var i GetAccountPlaylistsRow
		if err := rows.Scan(
			&i.PlaylistID,
			&i.IsAlbum,
			&i.Slug,
			&i.PlaylistName,
			&i.UserID,
			&i.Handle,
			&i.IsDeactivated,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
