// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_developer_apps.sql

package dbv1

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDeveloperApps = `-- name: GetDeveloperApps :many
SELECT
  address,
  user_id,
  name,
  description,
  image_url
FROM developer_apps
WHERE 
  (user_id = $1 OR address = $2)
  AND is_current = true
  AND is_delete = false
ORDER BY created_at DESC
`

type GetDeveloperAppsParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	Address string      `json:"address"`
}

type GetDeveloperAppsRow struct {
	Address     string      `json:"address"`
	UserID      pgtype.Int4 `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ImageUrl    pgtype.Text `json:"image_url"`
}

func (q *Queries) GetDeveloperApps(ctx context.Context, arg GetDeveloperAppsParams) ([]GetDeveloperAppsRow, error) {
	rows, err := q.db.Query(ctx, getDeveloperApps, arg.UserID, arg.Address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeveloperAppsRow
	for rows.Next() {
		var i GetDeveloperAppsRow
		if err := rows.Scan(
			&i.Address,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperAppsWithGrants = `-- name: GetDeveloperAppsWithGrants :many
SELECT
  developer_apps.address,
  developer_apps.name,
  developer_apps.description,
  developer_apps.image_url,
  grants.user_id AS grantor_user_id,
  grants.created_at AS grant_created_at,
  grants.updated_at AS grant_updated_at
FROM developer_apps
LEFT JOIN grants ON grants.grantee_address = developer_apps.address
WHERE
  (grants.user_id = $1 OR developer_apps.address = $2)
  AND grants.is_revoked = false
  AND grants.is_current = true
  AND developer_apps.is_current = true
  AND developer_apps.is_delete = false
ORDER BY grants.updated_at ASC
`

type GetDeveloperAppsWithGrantsParams struct {
	UserID  int32  `json:"user_id"`
	Address string `json:"address"`
}

type GetDeveloperAppsWithGrantsRow struct {
	Address        string      `json:"address"`
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
	ImageUrl       pgtype.Text `json:"image_url"`
	GrantorUserID  pgtype.Int4 `json:"grantor_user_id"`
	GrantCreatedAt time.Time   `json:"grant_created_at"`
	GrantUpdatedAt time.Time   `json:"grant_updated_at"`
}

func (q *Queries) GetDeveloperAppsWithGrants(ctx context.Context, arg GetDeveloperAppsWithGrantsParams) ([]GetDeveloperAppsWithGrantsRow, error) {
	rows, err := q.db.Query(ctx, getDeveloperAppsWithGrants, arg.UserID, arg.Address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeveloperAppsWithGrantsRow
	for rows.Next() {
		var i GetDeveloperAppsWithGrantsRow
		if err := rows.Scan(
			&i.Address,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.GrantorUserID,
			&i.GrantCreatedAt,
			&i.GrantUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
