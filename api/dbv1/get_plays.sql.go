// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_plays.sql

package dbv1

import (
	"context"
	"time"
)

const getPlays = `-- name: GetPlays :many
SELECT
    date_trunc($1, hourly_timestamp)::timestamp AS timestamp,
    SUM(play_count) AS count
FROM
    hourly_play_counts
WHERE
    hourly_timestamp > $2
GROUP BY
    date_trunc($1, hourly_timestamp)
ORDER BY
    timestamp DESC
LIMIT $3
`

type GetPlaysParams struct {
	BucketSize string    `json:"bucket_size"`
	StartTime  time.Time `json:"start_time"`
	LimitVal   int32     `json:"limit_val"`
}

type GetPlaysRow struct {
	Timestamp time.Time `json:"timestamp"`
	Count     int64     `json:"count"`
}

func (q *Queries) GetPlays(ctx context.Context, arg GetPlaysParams) ([]GetPlaysRow, error) {
	rows, err := q.db.Query(ctx, getPlays, arg.BucketSize, arg.StartTime, arg.LimitVal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlaysRow
	for rows.Next() {
		var i GetPlaysRow
		if err := rows.Scan(&i.Timestamp, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
