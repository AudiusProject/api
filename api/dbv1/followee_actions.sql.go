// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: followee_actions.sql

package dbv1

import (
	"context"
	"time"
)

const followeeActions = `-- name: FolloweeActions :many
WITH my_follows AS (
  SELECT
    followee_user_id as user_id,
    follower_count
  FROM follows
  JOIN aggregate_user ON followee_user_id = user_id
  WHERE $1 > 0
    AND follower_user_id = $1
    AND follows.is_delete = false
  ORDER BY follower_count DESC
  LIMIT 5000
),

followee_reposts AS (
  SELECT
    'repost' as verb,
    reposts.user_id,
    repost_item_id as item_id,
    reposts.created_at,
    ROW_NUMBER() OVER (PARTITION BY repost_item_id ORDER BY created_at DESC) AS row_index
  FROM reposts
  JOIN my_follows USING (user_id)
  WHERE repost_item_id = ANY($2::int[])
    AND repost_type = 'track'
    AND reposts.is_delete = false
  ORDER BY follower_count DESC
),

followee_saves AS (
  SELECT
    'save' as verb,
    saves.user_id,
    save_item_id as item_id,
    saves.created_at,
    ROW_NUMBER() OVER (PARTITION BY save_item_id ORDER BY created_at DESC) AS row_index
  FROM saves
  JOIN my_follows USING (user_id)
  WHERE save_item_id = ANY($2::int[])
    AND save_type = 'track'
    AND saves.is_delete = false
  ORDER BY follower_count DESC
)

SELECT verb, user_id, item_id, created_at, row_index FROM followee_reposts WHERE row_index < 6
UNION ALL
SELECT verb, user_id, item_id, created_at, row_index FROM followee_saves WHERE row_index < 6
`

type FolloweeActionsParams struct {
	MyID interface{} `json:"my_id"`
	Ids  []int32     `json:"ids"`
}

type FolloweeActionsRow struct {
	Verb      string    `json:"verb"`
	UserID    int32     `json:"user_id"`
	ItemID    int32     `json:"item_id"`
	CreatedAt time.Time `json:"created_at"`
	RowIndex  int64     `json:"row_index"`
}

func (q *Queries) FolloweeActions(ctx context.Context, arg FolloweeActionsParams) ([]FolloweeActionsRow, error) {
	rows, err := q.db.Query(ctx, followeeActions, arg.MyID, arg.Ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FolloweeActionsRow
	for rows.Next() {
		var i FolloweeActionsRow
		if err := rows.Scan(
			&i.Verb,
			&i.UserID,
			&i.ItemID,
			&i.CreatedAt,
			&i.RowIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
